anotacoes importantes video do servidor



//Client.cs client side

//dentro de TCP criar pacote

private Packet receivedData;


// ConnectCallback apos socket.GetStream();

receivedData = new Packet();

// ReceiveCallback apos Array.copy

receivedData.Reset(HandleData(_data));


// novo metodo

//mais dois atributos

private delegate void PacketHandler(Packet _packet);
private static Dictionary<int, PacketHandler> packetHandlers;

public bool HandleData(byte[] _data) {
	int _packetLength = 0;
	receivedData.SetBytes(_data);

	if (receivedData.UnreadLength() >= 4) {
		_packetLength = receivedData.ReadInt();
		if (_packetLength <= 0) {
			return true;
		}
	}

	while (_packetLength > 0 && _packetLength <= receivedData.UnreadLength()) {
		byte[] _packetBytes = receivedData.ReadBytes(_packetLength);
		ThreadManager.ExecuteOnMainThread (() => {
			using (Packet _packet = new Packet(_packetBytes)) {
				int _packetId = _packet.ReadInt();
				packetHandlers[_packetId](_packet);
			}
		});
	
		_packetLength = 0;
		if (receivedData.UnreadLength() >= 4) {
			_packetLength = receivedData.ReadInt();
			if (_packetLength <= 0) {
				return true;
			}
		}
	}

	if (_packetLength <= 1) {
		return true;
	}

	return false;
}

private void InitializeClientData() {
	packetHandlers = new Dictionary<int, PacketHandler>() {
		{ (int) ServerPackets.welcome, ClientHandle.Welcome }
	};
	Debug.Log("Initialized Packets");
}

//no inicio do metodo ConnectToServer
InitializeClientData();


//novo metodo

public void SendData(Packet _packet) {
	try {
		if (socket != null) {
			steam.BeginWrite(_packet.ToArray(), 0, _packet.Length(), null, null);
		}
	} catch (Exception _e) {
		Debug.Log($"Error sendind data to server via TCP {_e}");
	}
}



